[["control-structures.html", "Lesson 4 Control structures 4.1 If 4.2 Else 4.3 Code blocks 4.4 Loops 4.5 While 4.6 For 4.7 For 4.8 Loops with conditional statements 4.9 Summary", " Lesson 4 Control structures In this lesson you will get to know control structures as a significant structural element of code. Control structures allow our code to adapt its behavior depending on the value of the current variables in the environment. We distinguish between two types of control structures: Conditional statements which allow to execute instructions only if a certain condition is satisfied. Loops which allow to repeat one or more instructions multiple times. Loops are commonly used to apply the same operation on a series of values that are stored in sequences such as vectors or lists. 4.1 If The most fundamental conditional statement in R is the structure if, which is used to execute one or more instructions only if a certain condition is is TRUE. In order to include an if-structure in your code, you need to use the following syntax: a_value &lt;- -7 if (a_value &lt; 0) cat(&quot;Negative&quot;) ## Negative The statement cat(Negative) gets executed because the condition (a_value &lt; 0) is TRUE. The function cat() concatenates and prints string inputs (Negative in the example above). Alternatively, you can use the function print() to write variable values to the console window. These functions are highly useful to inspect whether variables take on expected values! Note that every conditional statement (e.g. a_value &lt; 0) returns a logical value that is either TRUE or FALSE. Remove the negative sign from the conditional statement in the code above. See solution! The condition yields FALSE. The statement does not get executed. 4.2 Else Format: if (condition) statement1 else statement2 condition: expression returning a logic value (TRUE or FALSE) statement1 and statement2: any valid R statements statement1 executed if condition is TRUE statement2 executed if condition is FALSE a_value &lt;- -7 if (a_value &lt; 0) cat(&quot;Negative&quot;) else cat(&quot;Positive&quot;) ## Negative a_value &lt;- 8 if (a_value &lt; 0) cat(&quot;Negative&quot;) else cat(&quot;Positive&quot;) ## Positive 4.3 Code blocks Code blocks allow to encapsulate several statements in a single group { and } contain code blocks the statements are execute together first_value &lt;- 8 second_value &lt;- 5 if (first_value &gt; second_value) { cat(&quot;First is greater than second\\n&quot;) difference &lt;- first_value - second_value cat(&quot;Their difference is &quot;, difference) } ## First is greater than second ## Their difference is 3 4.4 Loops Loops are a fundamental component of (procedural) programming. There are two main types of loops: conditional loops are executed as long as a defined condition holds true construct while construct repeat deterministic loops are executed a pre-determined number of times construct for 4.5 While The while construct can be defined using the while reserved word, followed by the conditional statement between simple brackets, and a code block. The instructions in the code block are re-executed as long as the result of the evaluation of the conditional statement is TRUE. current_value &lt;- 0 while (current_value &lt; 3) { cat(&quot;Current value is&quot;, current_value, &quot;\\n&quot;) current_value &lt;- current_value + 1 } ## Current value is 0 ## Current value is 1 ## Current value is 2 4.6 For The for construct can be defined using the for reserved word, followed by the definition of an iterator. The iterator is a variable which is temporarily assigned with the current element of a vector, as the construct iterates through all elements of the vector. This definition is followed by a code block, whose instructions are re-executed once for each element of the vector. cities &lt;- c(&quot;Derby&quot;, &quot;Leicester&quot;, &quot;Lincoln&quot;, &quot;Nottingham&quot;) for (city in cities) { cat(&quot;Do you live in&quot;, city, &quot;?\\n&quot;) } ## Do you live in Derby ? ## Do you live in Leicester ? ## Do you live in Lincoln ? ## Do you live in Nottingham ? 4.7 For It is common practice to create a vector of integers on the spot in order to execute a certain sequence of steps a pre-defined number of times. for (i in 1:3) { cat(&quot;This is exectuion number&quot;, i, &quot;:\\n&quot;) cat(&quot; See you later!\\n&quot;) } ## This is exectuion number 1 : ## See you later! ## This is exectuion number 2 : ## See you later! ## This is exectuion number 3 : ## See you later! 4.8 Loops with conditional statements 3:0 ## [1] 3 2 1 0 #Example: countdown! for (i in 3:0) { if (i == 0) { cat(&quot;Go!\\n&quot;) } else { cat(i, &quot;\\n&quot;) } } ## 3 ## 2 ## 1 ## Go! 4.9 Summary Control structures Conditional statements Loops Next: Functions Defining functions Scope of a variable "]]
