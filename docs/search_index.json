[["complex-data-types.html", "Lesson 3 Complex Data Types 3.1 Vectors 3.2 Any and all 3.3 Factors 3.4 table 3.5 Specified levels 3.6 (Unordered) Factors 3.7 Ordered Factors 3.8 Matrices 3.9 Arrays 3.10 Selection 3.11 Lists 3.12 Named Lists", " Lesson 3 Complex Data Types In this lecture I will introduce a series of more complex data types that are built on top of the already discussed simple data types numeric, character (string) and logic (see Lecture 1 Simple data types). In this lecture you will get to know the following complex data types: Vector Matrice List Data Frame Complex data types constrain the structure that a container (such as a variable) might take. 3.1 Vectors A Vectors is an ordered list of values. Vectors can be of any simple type: - numeric - character - logic However all items in a vector have to be of the same type. A vector can be of any length. Defining a vector variable is similar to the declaration of simple type variables, except that the vector is created by a return function named c() that combines values into a vector: # Declare a vector variable of strings a_vector &lt;- c(&quot;Birmingham&quot;, &quot;Derby&quot;, &quot;Leicester&quot;, &quot;Lincoln&quot;, &quot;Nottingham&quot;, &quot;Wolverhampton&quot;) a_vector ## [1] &quot;Birmingham&quot; &quot;Derby&quot; &quot;Leicester&quot; &quot;Lincoln&quot; ## [5] &quot;Nottingham&quot; &quot;Wolverhampton&quot; Note that the second line of the answer provided by R in the console when asking to evaluate the variable starts with [5], as the second line strats with the fifth element of the answer (i.e., the vector) There are also other functions to create vectors such as seq(): #create vector of real numbers of interval 0.5 in a range between 1 and 7 a_vector &lt;- seq(1, 7, by = 0.5) a_vector ## [1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 or rep(): #create vector with 4 identical character string values a_vector &lt;- rep(&quot;Ciao&quot;, 4) a_vector ## [1] &quot;Ciao&quot; &quot;Ciao&quot; &quot;Ciao&quot; &quot;Ciao&quot; Alternatively, numeric vectors can be created by using the following syntax: #create a vector of integer numbers between 1 and 10 a_vector &lt;- (1:10) a_vector ## [1] 1 2 3 4 5 6 7 8 9 10 3.1.1 Vector element selection Each element of a vector can be retrieved specifying the related index between square brackets, after the identifier of the vector. The first element of the vector has index 1. The following, code retrieves a value of 5 which is the third element of the vector with identifier a_vector: a_vector &lt;- (3:8) a_vector[3] ## [1] 5 A vector of indexes can be used to retrieve more than one element: a_vector &lt;- (3:8) a_vector[c(2, 4)] ## [1] 4 6 The values 4 and 6 are returned. These values have the indices 2 and 4 in vector a_vector. Note that the vector containing the indices 2 and 4 is created on the fly (without variable assignment). Now try by yourself. Create a vector that looks like east_midlands_cities &lt;- c(Derby, Leicester, Lincoln, Nottingham) , select the last three cities out of the voector of four cities in east_midlands_cities by means of an vector of indices and assign the returned values to a new vector named selected_cities. See solution! east_midlands_cities &lt;- c(Derby, Leicester, Lincoln, Nottingham) my_indexes &lt;- 2:4 selected_cities &lt;- c(east_midlands_cities[my_indexes]) 3.1.2 Functions on vectors Functions can be used on a vector variable directly a_numeric_vector &lt;- 1:5 a_numeric_vector + 10 ## [1] 11 12 13 14 15 sqrt(a_numeric_vector) ## [1] 1.000000 1.414214 1.732051 2.000000 2.236068 a_numeric_vector &gt;= 3 ## [1] FALSE FALSE TRUE TRUE TRUE 3.2 Any and all Overall expressions can be tested using the functions: any, TRUE if any of the elements satisfies the condition all, TRUE if all of the elements satisfy the condition any(a_numeric_vector &gt;= 3) ## [1] TRUE all(a_numeric_vector &gt;= 3) ## [1] FALSE 3.3 Factors A factor is a data type similar to a vector. However, the values contained in a factor can only be selected from a set of levels. houses_vector &lt;- c(&quot;Bungalow&quot;, &quot;Flat&quot;, &quot;Flat&quot;, &quot;Detached&quot;, &quot;Flat&quot;, &quot;Terrace&quot;, &quot;Terrace&quot;) houses_vector ## [1] &quot;Bungalow&quot; &quot;Flat&quot; &quot;Flat&quot; &quot;Detached&quot; &quot;Flat&quot; &quot;Terrace&quot; &quot;Terrace&quot; houses_factor &lt;- factor(c(&quot;Bungalow&quot;, &quot;Flat&quot;, &quot;Flat&quot;, &quot;Detached&quot;, &quot;Flat&quot;, &quot;Terrace&quot;, &quot;Terrace&quot;)) houses_factor ## [1] Bungalow Flat Flat Detached Flat Terrace Terrace ## Levels: Bungalow Detached Flat Terrace 3.4 table The function table can be used to obtain a tabulated count for each level. houses_factor &lt;- factor(c(&quot;Bungalow&quot;, &quot;Flat&quot;, &quot;Flat&quot;, &quot;Detached&quot;, &quot;Flat&quot;, &quot;Terrace&quot;, &quot;Terrace&quot;)) houses_factor ## [1] Bungalow Flat Flat Detached Flat Terrace Terrace ## Levels: Bungalow Detached Flat Terrace table(houses_factor) ## houses_factor ## Bungalow Detached Flat Terrace ## 1 1 3 2 3.5 Specified levels A specific set of levels can be specified when creating a factor by providing a levels argument. houses_factor_spec &lt;- factor( c(&quot;People Carrier&quot;, &quot;Flat&quot;, &quot;Flat&quot;, &quot;Hatchback&quot;, &quot;Flat&quot;, &quot;Terrace&quot;, &quot;Terrace&quot;), levels = c(&quot;Bungalow&quot;, &quot;Flat&quot;, &quot;Detached&quot;, &quot;Semi&quot;, &quot;Terrace&quot;)) table(houses_factor_spec) ## houses_factor_spec ## Bungalow Flat Detached Semi Terrace ## 0 3 0 0 2 3.6 (Unordered) Factors In statistics terminology, (unordered) factors are categorical (i.e., binary or nominal) variables. Levels are not ordered. income_nominal &lt;- factor( c(&quot;High&quot;, &quot;High&quot;, &quot;Low&quot;, &quot;Low&quot;, &quot;Low&quot;, &quot;Medium&quot;, &quot;Low&quot;, &quot;Medium&quot;), levels = c(&quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;)) The greater than operator is not meaningful on the income_nominal factor defined above income_nominal &gt; &quot;Low&quot; ## Warning in Ops.factor(income_nominal, &quot;Low&quot;): &#39;&gt;&#39; not meaningful for factors ## [1] NA NA NA NA NA NA NA NA 3.7 Ordered Factors In statistics terminology, ordered factors are ordinal variables. Levels are ordered. income_ordered &lt;- ordered( c(&quot;High&quot;, &quot;High&quot;, &quot;Low&quot;, &quot;Low&quot;, &quot;Low&quot;, &quot;Medium&quot;, &quot;Low&quot;, &quot;Medium&quot;), levels = c(&quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;)) income_ordered &gt; &quot;Low&quot; ## [1] TRUE TRUE FALSE FALSE FALSE TRUE FALSE TRUE sort(income_ordered) ## [1] Low Low Low Low Medium Medium High High ## Levels: Low &lt; Medium &lt; High 3.8 Matrices Matrices are collections of numerics arranged in a two-dimensional rectangular layout the first argument is a vector of values the second specifies number of rows and columns R offers operators and functions for matrix algebra a_matrix &lt;- matrix(c(3, 5, 7, 4, 3, 1), c(3, 2)) a_matrix ## [,1] [,2] ## [1,] 3 4 ## [2,] 5 3 ## [3,] 7 1 3.9 Arrays Variables of the type arrayare higher-dimensionalmatrices. the first argument is avector containing thevalues the second argument isavector specifying thedepth of each dimension a3dim_array &lt;- array(1:24, dim=c(4, 3, 2)) a3dim_array ## , , 1 ## ## [,1] [,2] [,3] ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 ## ## , , 2 ## ## [,1] [,2] [,3] ## [1,] 13 17 21 ## [2,] 14 18 22 ## [3,] 15 19 23 ## [4,] 16 20 24 3.10 Selection Subsets of matrices (and arrays) can be selected as seen for vectors. a_matrix[2, c(1, 2)] ## [1] 5 3 a3dim_array[c(1, 2), 2, 2] ## [1] 17 18 3.11 Lists Variables of the type list can contain elements of different types (including vectors and matrices), whereas elements of vectors are all of the same type. employee &lt;- list(&quot;Stef&quot;, 2015) employee ## [[1]] ## [1] &quot;Stef&quot; ## ## [[2]] ## [1] 2015 employee[[1]] # Note the double square brackets for selection ## [1] &quot;Stef&quot; 3.12 Named Lists In named lists each element has a name, and elements can be selected using their name after the symbol $. employee &lt;- list(employee_name = &quot;Stef&quot;, start_year = 2015) employee ## $employee_name ## [1] &quot;Stef&quot; ## ## $start_year ## [1] 2015 employee$employee_name ## [1] &quot;Stef&quot; "]]
