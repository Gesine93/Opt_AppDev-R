[["data-visualisation.html", "Lesson 8 Data visualisation 8.1 The Grammar of graphics 8.2 Visualization of distributions 8.3 Boxplots 8.4 Jittered points 8.5 Violin plot 8.6 Violin plot 8.7 Lines 8.8 Lines 8.9 Scatterplots 8.10 Overlapping points 8.11 Overlapping points 8.12 Bin counts 8.13 Bin counts 8.14 Summary", " Lesson 8 Data visualisation R has a very rich set of graphical functions. The R Graph Gallery provides a large number of examples (including code). In this lesson you will get to know the ggplot2 library, which is the most popular library for creating graphics in R. You will learn to create standard graphs such as histograms, boxplots or scatterplots. Furthermore, map making in R will be introduced. 8.1 The Grammar of graphics The ggplot2 library is part of Tidyverse and offers a series of functions for creating graphics declaratively, based on the concepts outlined in the Grammar of Graphics by Leland Wilkinson. The grammar of graphics is a schema that enables us to concisely describe the components of a graphic. These components are called layers of grammatical elements. Overall the grammar comprises seven layers: Data - The data element is the dataset itself. Aesthetics - This layer defines how variables are mapped onto scales (see description below). Geometries - This element determines how our data is being displayed (bars, points, lines) Facets - Facetting splits the data into subset and displays the same graph for every subset. Statistics - These are statistics derived from the data (add mean, median, quartile). Coordinates - This element determines the transformation of axes (e.g. change spacing of displayed data) Themes - This element determines the graphics background. The aestethics layer offers a number of different options to map data onto visual variables. A visual variable is an aspect of a mark that can be controlled to change its appearance. Visual variables are: Size Shape Orientation Colour (hue) Colour value (brightness) Texture Position (map variable to x or y axis) For instance, in Figure 8.1 variables Gdp per capita and Life Expectancy are mapped onto the x and y axes, variables national population and world regions are mapped onto visual variables size and color. Figure 8.1: Visual variables color and size In order to make that concepts clearer, a number of examples will me presented in upcoming sections. The basic concept behind the grammar of graphics is described in an article by Hadley Wickham. 8.2 Visualization of distributions As already announced above, functions in the ggplot2 library are structured according to the Grammar of Graphics. To create a graph in ggplot2, we need to provide input data, specify visual variables by means of an aesthetics element (aes()), specify the geometry of marks (e.g., geom_point) and apply transformations (axis spacing) and themes (background theme of the graph). We start the analysis with a simple histogram, to explore the distribution of air quality data that has been measured at different locations in Upper Austria. The data includes the following variables time of measurement ID of the measuring station measured meteorological component meantype unit of measurement measurement value The following code renders the first five lines of the dataset: library(tidyverse) library(knitr) #read csv data, Note: Semicolon seperated CSVs can be loaded by function &#39;read_delim()&#39; airquality &lt;- read_delim(&quot;data/AirQualityUpperAut.csv&quot;, delim = &quot;;&quot;) airquality %&gt;% dplyr::slice_head(n = 5) %&gt;% knitr::kable() time station component meantype unit value 21.10.2021 13:30 C001 BOE HMW m/s 14.1 21.10.2021 14:00 C001 BOE HMW m/s 12.0 21.10.2021 14:30 C001 BOE HMW m/s 10.1 21.10.2021 15:00 C001 BOE HMW m/s 7.9 21.10.2021 15:30 C001 BOE HMW m/s 9.2 The code below filters the airquality datset by measurement component and temporal resolution. Then the data subset is passed as a first argument to function ggplot(). In the second argument, we map the variable value onto the x-axis with the aesthetics argument aes(). geom_histogram() specifies the geometry of the plot and theme_bw() is used to add a background theme. #filter NO2 measurements with temporal resolution 30min (HMW) airquality %&gt;% dplyr::filter(component == &quot;NO2&quot; &amp; meantype == &quot;HMW&quot;) %&gt;% #create plot ggplot2::ggplot(., #the dot &#39;.&#39; represents the piped value aes( x = value #map variable &#39;value&#39; onto x-axis ) ) + ggplot2::geom_histogram() + #define geometry ggplot2::theme_bw() #define theme If we aim to distinguish between measurements of respective measurement stations, we can map the variable station onto visual variable color: airquality %&gt;% dplyr::filter(component == &quot;NO2&quot; &amp; meantype == &quot;HMW&quot;) %&gt;% dplyr::filter(station == &quot;S125&quot; | station == &quot;S431&quot; | station == &quot;S270&quot;) %&gt;% #select 3 stations ggplot2::ggplot(., aes( x = value, fill = station ) ) + ggplot2::xlab(&quot;NO2 [mg/m^3]&quot;) + ggplot2::ylab(&quot;Count&quot;) + scale_fill_manual(name = &quot;Measurement stations&quot;, values = c(&quot;grey20&quot;, &quot;grey50&quot;, &quot;grey80&quot;)) + ggplot2::geom_histogram() + ggplot2::theme_bw() This is implemented by adding an attribute fill = station to the aesthetics element (aes()). ggplot2 offers a number of functions to specify your own set of mappings from levels in the data to aesthetic values. In the example above the function scale_fill_manual() is used to map the three levels S125, S270 and S431 to the predefined ggplot colors grey20, grey50 and grey80. Instead of ggplot colors, you can also use hex color codes. Note that plot components are added by means of a plus + sign. It allows you to start simple, then get more and more complex. So far we have added two axis labels. Create a new R-Script, download the input data, recreate the histogram and add a title to the plot (see documentation). See solution! Insert title: ggplot2::ggtitle(Nitrogen dioxide concentration) 8.3 Boxplots x categorical variable y variable to plot geom_boxplot 8.4 Jittered points x categorical variable y variable to plot geom_jitter 8.5 Violin plot x categorical variable y variable to plot geom_violin 8.6 Violin plot 8.7 Lines x e.g., a temporal variable y variable to plot geom_line 8.8 Lines 8.9 Scatterplots x and y variable to plot geom_point 8.10 Overlapping points x and y variable to plot geom_count counts overlapping points and maps the count to size 8.11 Overlapping points 8.12 Bin counts x and y variable to plot geom_bin2d 8.13 Bin counts 8.14 Summary Data visualisation Grammar of graphics ggplot2 Next: Descriptive statistics stat.desc dplyr::across "]]
