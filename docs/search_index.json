[["read-and-write-data.html", "Lesson 7 Read and write data 7.1 Read and write tabular data 7.2 Read and write vector data 7.3 Data API", " Lesson 7 Read and write data In the exercise data manipulation we have read data from a CSV file into our script. Similarly we can also write code outputs to file. In this lesson you will learn to read and write plain-text and spatial vector file formats. Moreover, we will retrieve online data by means of a data API. 7.1 Read and write tabular data A series of formats are based on plain-text files. For instance comma-separated values files .csv semi-colon-separated values files .csv tab-separated values files .tsv other formats using custom delimiters fix-width files .fwf The readr library (also part of Tidyverse) provides a series of functions that can be used to load from and save to such data formats. For instance, the read_csv function reads a comma delimited (CSV) file from the path provided as the first argument. The code example below reads a CSV file that contains global fishery statistics provided by the World Bank and queries Norwegian entries. The function writes_csv writes these entries to a new CSV file. library(tidyverse) fishery_data &lt;- readr::read_csv(&quot;data/capture-fisheries-vs-aquaculture.csv&quot;) #print(fishery_data) #print(typeof(fishery_data$)) fishery_data %&gt;% dplyr::filter(Entity == &quot;Norway&quot;) %&gt;% readr::write_csv(&quot;data/capture-fisheries-vs-aquaculture-noraway.csv&quot;, append=FALSE) %&gt;% dplyr::slice_head(n = 3) %&gt;% knitr::kable() Entity Code Year Aquaculture production (metric tons) Capture fisheries production (metric tons) Norway NOR 1960 1900 1609362 Norway NOR 1961 900 1758413 Norway NOR 1962 200 1572913 In order to run the script, download the CSV file. Then copy and run the code in a new R-script. Other important packages for reading tabular data are readxl for Excel (.xls and .xlsx) and haven for SPSS, Stata and SAS data. 7.2 Read and write vector data The library sf makes it easy to read and write vector datasets such as shapefiles. The name (sf stands for simple features) already implies that sf supports simple feature access via R. Simple features is a widely supported data model that underlies data structures in many GIS applications including QGIS and PostGIS. A major advantage of this is that using the data model ensures your work is cross-transferable to other set-ups, for example importing from and exporting to spatial databases. In order to load vector data in an R-Script, we can use the function st_read(). In the code block below, a shapefile (North Carolina sample data) is loaded and assigned to a variable nc. The next line creates a basic map in sf by means of plot(). By default this creates a multi-panel plot, one sub-plot for each variable of the object. library(sf) nc &lt;- sf::st_read(&quot;data/nc.shp&quot;) ## Reading layer `nc&#39; from data source ## `C:\\Users\\b1045498\\Downloads\\Opt_AppDev-R\\data\\nc.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 100 features and 14 fields ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965 ## Geodetic CRS: NAD27 plot(nc) The library sf represents features as records in a data frame or tibble with a geometry list-column. The example below renders three features (rows) of variable nc including the geometry column as well as the attributes AREA (feature area) and NAME (name of county): nc %&gt;% dplyr::select(AREA, NAME, geometry) %&gt;% dplyr::slice_head(n = 3) %&gt;% knitr::kable() AREA NAME geometry 0.114 Ashe MULTIPOLYGON (((-81.47276 3 0.061 Alleghany MULTIPOLYGON (((-81.23989 3 0.143 Surry MULTIPOLYGON (((-80.45634 3 sf also includes a number of operations to manipulate the geometry of features such as st_simplify: sf::st_simplify(nc) %&gt;% plot(., max.plot = 1) You may have recognized that a dot (.) is used as a parameter in the function plot(). The dot represents the piped value. In the example above the dot is used to define the simplified geometry of nc as first parameter of function plot() and max.plot = 1 as the second. In the next example, the st_geometry() retrieves the geometry attribute from variable nc, function st_centroid() calculates the controid of the polygon geometry (counties) and function st_write writes the centroid point geometry to file. sf::st_geometry(nc) %&gt;% sf::st_centroid() %&gt;% sf::st_write(&quot;data/nc-centroids.shp&quot;, delete_dsn = TRUE) %&gt;% plot(pch = 3, col = &#39;red&#39;) ## Deleting source `data/nc-centroids.shp&#39; using driver `ESRI Shapefile&#39; ## Writing layer `nc-centroids&#39; to data source ## `data/nc-centroids.shp&#39; using driver `ESRI Shapefile&#39; ## Writing 100 features with 0 fields and geometry type Point. The online book Geocomputation with R offers a more comprehensive explanation of available geometric, attribute and spatial data operations. For a quick overview you may turn to the sf cheatsheets. In order to test the code on your machine, download the North Carolina dataset and install the libraries sf and Rcpp before you run the code in an R-Script. The plot() function offers a large number of arguments that can be used to customize your map. Replace Area in the map above by a more meaningful map title. Turn to the documentation for more information. See my solution! Similar R functions are also available for raster data (see package raster: Geographic Data Analysis and Modeling) 7.3 Data API API is the acronym for Application Programming Interface, which is a software intermediary that allows two applications to talk to each other. By means of an API we can read, write and modify information on the web. The following video briefly introduces the technology behind it. Figure 7.1: Video (3:13 min): REST API concepts and examples. The most important take away messages are: With a REST API web data is accessible through a URL (Client-Server call via HTTP protocol) The HTTP Get Method delivers data (a Response) - i.e. is used to read data, the HTTP Post Method is used to create new REST API resources (write data). URL Parameters are used to filter specific data from a response. Typically, APIs can return data in a number of different formats. JSON is a very popular format for transferring web data. The two primary elements that make up JSON are keys and values. The library httr (also part of Tidyverse) offers functions to programmatically implement API calls in an R script. We will make use of this library to let our R script interact with the APIs offered by OpenWeather Map that contain historical and real-time weather data for retrieval. In the upcoming example we will make a call to the Current Weather API, which is one out of currenty 10 free APIs provided by OpenWeather Map. For accessing the data, we need to create a URL that is composed of a references to the data source (base) and parameters to filter the desired data subset (lat and lon). The parameters are concatenated by means of a &amp; symbol, a question mark ? needs to be placed between reference URL and parameters: library(httr) base &lt;- &quot;http://api.openweathermap.org/data/2.5/weather&quot; lat &lt;- &quot;47.81&quot; lon &lt;- &quot;13.03&quot; apiKey &lt;- &quot;3f87141421b32590d50416aae5ca780c&quot; call &lt;- paste(base, &quot;?lat=&quot;, lat, &quot;&amp;lon=&quot; , lon, &quot;&amp;appid=&quot;, apiKey, sep=&quot;&quot;) print(call) ## [1] &quot;http://api.openweathermap.org/data/2.5/weather?lat=47.81&amp;lon=13.03&amp;appid=3f87141421b32590d50416aae5ca780c&quot; get &lt;- GET(call) In the code above, the function paste() assembles base URL and parameters. The URL (of type string) is then passed as an argument to function GET() that executes the HTTP Get method. Note: The OpenWeather API requires an API Key to be passed as a parameter in the call. Get your personal Key to implement your own API requests. Per default, the GET() function returns a response object. Printing a response object gives you some useful information: the actual url used (after any redirects), the http status, the file (content) type, the size, and if its a text file, the first few lines of output. You can pull out important parts of the response with various helper functions such as status_code() and content(): status_code(get) ## [1] 200 str(content(get)) ## List of 13 ## $ coord :List of 2 ## ..$ lon: num 13 ## ..$ lat: num 47.8 ## $ weather :List of 1 ## ..$ :List of 4 ## .. ..$ id : int 800 ## .. ..$ main : chr &quot;Clear&quot; ## .. ..$ description: chr &quot;clear sky&quot; ## .. ..$ icon : chr &quot;01d&quot; ## $ base : chr &quot;stations&quot; ## $ main :List of 6 ## ..$ temp : num 286 ## ..$ feels_like: num 285 ## ..$ temp_min : num 282 ## ..$ temp_max : num 289 ## ..$ pressure : int 1014 ## ..$ humidity : int 80 ## $ visibility: int 10000 ## $ wind :List of 2 ## ..$ speed: num 3.09 ## ..$ deg : int 320 ## $ clouds :List of 1 ## ..$ all: int 0 ## $ dt : int 1635510788 ## $ sys :List of 5 ## ..$ type : int 1 ## ..$ id : int 6877 ## ..$ country: chr &quot;AT&quot; ## ..$ sunrise: int 1635486461 ## ..$ sunset : int 1635522918 ## $ timezone : int 7200 ## $ id : int 2766824 ## $ name : chr &quot;Salzburg&quot; ## $ cod : int 200 The Current Weather API call returned a number of real-time weather variables such as temperature, air pressure or humidity for the location of Salzburg. Current weather data may alternatively be retrieved by City ID or City Name (see the documentation to get an overview of available API parameters). Inspect the response object by means of a function called headers(). What methods are allowed when accessing the Current Weather API? See solution! Only GET and POST methods are allowed. Other APIs allow to update existing REST API resources (PUT method) or to delete a REST API resource (DELETE method). In order to facilitate subsequent analyses and data visualization, we can convert the content of the return object to a data frame by means of function fromJSON() that is part of the library library(jsonlite): library(jsonlite) get_text &lt;- content(get, &quot;text&quot;) get_json &lt;- fromJSON(get_text, flatten = TRUE) get_df &lt;- as.data.frame(get_json) Copy the code snippets above to a new R-Script. Make sure to replace the key in the code example by your own API key! If you need help, please turn to the discussion forum. Tidyverse also provides other packages for reading data such as DBI for relational databases jsonlite for JSON and xml2 for XML. "]]
