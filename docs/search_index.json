[["introduction-to-r.html", "Introduction to Geoinformatics Lesson 1 Introduction to R 1.1 About this module 1.2 R programming language 1.3 Installation and Setup 1.4 Schedule 1.5 Reference books 1.6 R 1.7 Interpreting values 1.8 Basic types 1.9 Numeric operators 1.10 Logical operators 1.11 Summary", " Introduction to Geoinformatics tbd 22 Juli, 2021 Lesson 1 Introduction to R 1.1 About this module Stefano De Sabbata This module will provide you with the fundamental skills in basic programming in R. data wrangling Upon the completion of this module, you will be able to load and preprocess data in R, write Learning objectives xxx xxx 1.2 R programming language R is a language that is applied in diverse fields of data science and analysis. Typical applications include data wrangling statistical analysis machine learning data visualisation and maps processing spatial data geographic information analysis and many more. Apart from its widespread use, there are a number of other reasons to learn R R is free and open source. R has more comprehensive functionality than most proprietary solutions. R is avaialble for Windows, May and Linux R is a general-purpose programming language, so you can use it to automate analyses and create new custom functions that extend default features. Because R is open source, it has a large user community, so it is easy to get help. R is a so called high level programming language or scripting language. This means that R code is not compiled into a computer readable format, but interpreted by an interpreter. An interpreter is a computer program that directly interprets and executes instructions written in a programming language. In order to make sure that the interpreter can understand the program code, the programmer must stick to the grammar of the programming language; i.e. the interpreter expects commands to appear in a predefined order. This grammar is often regarded as Syntax. In this lession we will focus on some key principles of the R syntax and logic. 1.3 Installation and Setup Before you can run your code, you have to install R together with an Integrated Development Environment IDE on your machine: Download R from R Archive Network (CRAN.) Follow the instructions to and install the most up to date version on your machine (chose base as well as 32-bit or 64-bit dependent on the bit-version of your operating system). The IDE is where your write, test and execute your R programs. We strongly recommend using RStudio Desktop, which is freely available for download. If you need help, please turn to the discussion forum! 1.4 Schedule The lectures and practical sessions have been designed to follow the schedule below xxx 1.5 Reference books Suggested reading Programming Skills for Data Science: Start Writing Code to Wrangle, Analyze, and Visualize Data with R by Michael Freeman and Joel Ross, Addison-Wesley, 2019. See book webpage and repository. R for Data Science by Garrett Grolemund and Hadley Wickham, OReilly Media, 2016. See online book. Discovering Statistics Using R by Andy Field, Jeremy Miles and ZoÃ« Field, SAGE Publications Ltd, 2012. See book webpage. Machine Learning with R: Expert techniques for predictive modeling by Brett Lantz, Packt Publishing, 2019. See book webpage. Further reading The Art of R Programming: A Tour of Statistical Software Design by Norman Matloff, No Starch Press, 2011. See book webpage An Introduction to R for Spatial Analysis and Mapping by Chris Brunsdon and Lex Comber, Sage, 2015. See book webpage Geocomputation with R by Robin Lovelace, Jakub Nowosad, Jannes Muenchow, CRC Press, 2019. See online book. 1.6 R Created in 1992 by Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand Free, open-source implementation of S statistical programming language Bell Labs Functional programming language Supports (and commonly used as) procedural (i.e., imperative) programming Object-oriented Interpreted (not compiled) 1.7 Interpreting values When values and operations are inputted in the Console, the interpreter returns the results of its interpretation of the expression 2 ## [1] 2 &quot;String value&quot; ## [1] &quot;String value&quot; # comments are ignored 1.8 Basic types R provides three core data types numeric both integer and real numbers character i.e., text, also called strings logical TRUE or FALSE 1.9 Numeric operators R provides a series of basic numeric operators Operator Meaning Example Output + Plus 5 + 2 7 - Minus 5 - 2 3 * Product 5 * 2 10 / Division 5 / 2 2.5 %/% Integer division 5 %/% 2 2 %% Module 5 %% 2 1 ^ Power 5^2 25 5 + 2 ## [1] 7 1.10 Logical operators R provides a series of basic logical operators to test Operator Meaning Example Output == Equal 5 == 2 FALSE != Not equal 5 != 2 TRUE &gt; (&gt;=) Greater (or equal) 5 &gt; 2 TRUE &lt; (&lt;=) Less (or equal) 5 &lt;= 2 FALSE ! Not !TRUE FALSE &amp; And TRUE &amp; FALSE FALSE | Or TRUE | FALSE TRUE 5 &gt;= 2 ## [1] TRUE 1.11 Summary An introduction to R Basic types Basic operators Next: Core concepts Variables Functions Libraries "],["core-concepts.html", "Lesson 2 Core concepts 2.1 Recap 2.2 Variables 2.3 Algorithms and functions 2.4 Functions 2.5 Functions and variables 2.6 Naming 2.7 Libraries 2.8 stringr 2.9 Summary", " Lesson 2 Core concepts 2.1 Recap Prev: An introduction to R Basic types Basic operators Now: Core concepts Variables Functions Libraries 2.2 Variables Variables store data and can be defined using an identifier (e.g., a_variable) on the left of an assignment operator &lt;- followed by the object to be linked to the identifier such as a value (e.g., 1) a_variable &lt;- 1 The value of the variable can be invoked by simply specifying the identifier. a_variable ## [1] 1 2.3 Algorithms and functions An algorithm or effective procedure is a mechanical rule, or automatic method, or programme for performing some mathematical operation (Cutland, 1980). A program is a specific set of instructions that implement an abstract algorithm. The definition of an algorithm (and thus a program) can consist of one or more functions set of instructions that preform a task possibly using an input, possibly returning an output value Programming languages usually provide pre-defined functions that implement common algorithms (e.g., to find the square root of a number or to calculate a linear regression) 2.4 Functions Functions execute complex operations and can be invoked specifying the function name the arguments (input values) between simple brackets each argument corresponds to a parameter sometimes the parameter name must be specified sqrt(2) ## [1] 1.414214 round(1.414214, digits = 2) ## [1] 1.41 2.5 Functions and variables functions can be used on the right side of &lt;- variables and functions can be used as arguments sqrt_of_two &lt;- sqrt(2) sqrt_of_two ## [1] 1.414214 round(sqrt_of_two, digits = 2) ## [1] 1.41 round(sqrt(2), digits = 2) ## [1] 1.41 2.6 Naming When creating an identifier for a variable or function R is a case sensitive language UPPER and lower case are not the same a_variable is different from a_VARIABLE names can include alphanumeric symbols . and _ names must start with a letter 2.7 Libraries Once a number of related, reusable functions are created they can be collected and stored in libraries (a.k.a. packages) install.packages is a function that can be used to install libraries (i.e., downloads it on your computer) library is a function that loads a library (i.e., makes it available to a script) Libraries can be of any size and complexity, e.g.: base: base R functions, including the sqrt function above rgdal: implementation of the GDAL (Geospatial Data Abstraction Library) functionalities 2.8 stringr R provides some basic functions to manipulate strings, but the stringr library provides a more consistent and well-defined set library(stringr) ## Warning: package &#39;stringr&#39; was built under R version 4.0.4 str_length(&quot;Leicester&quot;) ## [1] 9 str_detect(&quot;Leicester&quot;, &quot;e&quot;) ## [1] TRUE str_replace_all(&quot;Leicester&quot;, &quot;e&quot;, &quot;x&quot;) ## [1] &quot;Lxicxstxr&quot; 2.9 Summary Core concepts Variables Functions Libraries Next: Tidyverse Tidyverse libraries pipe operator "],["data-types.html", "Lesson 3 Data Types 3.1 Recap 3.2 Vectors 3.3 Defining vectors 3.4 Creating vectors 3.5 Selection 3.6 Functions on vectors 3.7 Any and all 3.8 Factors 3.9 table 3.10 Specified levels 3.11 (Unordered) Factors 3.12 Ordered Factors 3.13 Matrices 3.14 Arrays 3.15 Selection 3.16 Lists 3.17 Named Lists 3.18 Recap", " Lesson 3 Data Types 3.1 Recap Prev: Introduction 101 Lecture: Introduction to R 102 Lecture: Core concepts 103 Lecture: Tidyverse 104 Practical session Now: Data types vectors factors matrices, arrays lists 3.2 Vectors Vectors are ordered list of values. Vectors can be of any data type numeric character logic All items in a vector have to be of the same type Vectors can be of any length 3.3 Defining vectors A vector variable can be defined using an identifier (e.g., a_vector) on the left of an assignment operator &lt;- followed by the object to be linked to the identifier in this case, the result returned by the function c which creates a vector containing the provided elements a_vector &lt;- c(&quot;Birmingham&quot;, &quot;Derby&quot;, &quot;Leicester&quot;, &quot;Lincoln&quot;, &quot;Nottingham&quot;, &quot;Wolverhampton&quot;) a_vector ## [1] &quot;Birmingham&quot; &quot;Derby&quot; &quot;Leicester&quot; &quot;Lincoln&quot; ## [5] &quot;Nottingham&quot; &quot;Wolverhampton&quot; 3.4 Creating vectors the operator : the function seq the function rep 4:7 ## [1] 4 5 6 7 seq(1, 7, by = 0.5) ## [1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 6.5 7.0 seq(1, 10, length.out = 7) ## [1] 1.0 2.5 4.0 5.5 7.0 8.5 10.0 rep(&quot;Ciao&quot;, 4) ## [1] &quot;Ciao&quot; &quot;Ciao&quot; &quot;Ciao&quot; &quot;Ciao&quot; 3.5 Selection Each element of a vector can be retrieved specifying the related index between square brackets, after the identifier of the vector. The first element of the vector has index 1. a_vector[3] ## [1] &quot;Leicester&quot; A vector of indexes can be used to retrieve more than one element. a_vector[c(5, 3)] ## [1] &quot;Nottingham&quot; &quot;Leicester&quot; 3.6 Functions on vectors Functions can be used on a vector variable directly a_numeric_vector &lt;- 1:5 a_numeric_vector + 10 ## [1] 11 12 13 14 15 sqrt(a_numeric_vector) ## [1] 1.000000 1.414214 1.732051 2.000000 2.236068 a_numeric_vector &gt;= 3 ## [1] FALSE FALSE TRUE TRUE TRUE 3.7 Any and all Overall expressions can be tested using the functions: any, TRUE if any of the elements satisfies the condition all, TRUE if all of the elements satisfy the condition any(a_numeric_vector &gt;= 3) ## [1] TRUE all(a_numeric_vector &gt;= 3) ## [1] FALSE 3.8 Factors A factor is a data type similar to a vector. However, the values contained in a factor can only be selected from a set of levels. houses_vector &lt;- c(&quot;Bungalow&quot;, &quot;Flat&quot;, &quot;Flat&quot;, &quot;Detached&quot;, &quot;Flat&quot;, &quot;Terrace&quot;, &quot;Terrace&quot;) houses_vector ## [1] &quot;Bungalow&quot; &quot;Flat&quot; &quot;Flat&quot; &quot;Detached&quot; &quot;Flat&quot; &quot;Terrace&quot; &quot;Terrace&quot; houses_factor &lt;- factor(c(&quot;Bungalow&quot;, &quot;Flat&quot;, &quot;Flat&quot;, &quot;Detached&quot;, &quot;Flat&quot;, &quot;Terrace&quot;, &quot;Terrace&quot;)) houses_factor ## [1] Bungalow Flat Flat Detached Flat Terrace Terrace ## Levels: Bungalow Detached Flat Terrace 3.9 table The function table can be used to obtain a tabulated count for each level. houses_factor &lt;- factor(c(&quot;Bungalow&quot;, &quot;Flat&quot;, &quot;Flat&quot;, &quot;Detached&quot;, &quot;Flat&quot;, &quot;Terrace&quot;, &quot;Terrace&quot;)) houses_factor ## [1] Bungalow Flat Flat Detached Flat Terrace Terrace ## Levels: Bungalow Detached Flat Terrace table(houses_factor) ## houses_factor ## Bungalow Detached Flat Terrace ## 1 1 3 2 3.10 Specified levels A specific set of levels can be specified when creating a factor by providing a levels argument. houses_factor_spec &lt;- factor( c(&quot;People Carrier&quot;, &quot;Flat&quot;, &quot;Flat&quot;, &quot;Hatchback&quot;, &quot;Flat&quot;, &quot;Terrace&quot;, &quot;Terrace&quot;), levels = c(&quot;Bungalow&quot;, &quot;Flat&quot;, &quot;Detached&quot;, &quot;Semi&quot;, &quot;Terrace&quot;)) table(houses_factor_spec) ## houses_factor_spec ## Bungalow Flat Detached Semi Terrace ## 0 3 0 0 2 3.11 (Unordered) Factors In statistics terminology, (unordered) factors are categorical (i.e., binary or nominal) variables. Levels are not ordered. income_nominal &lt;- factor( c(&quot;High&quot;, &quot;High&quot;, &quot;Low&quot;, &quot;Low&quot;, &quot;Low&quot;, &quot;Medium&quot;, &quot;Low&quot;, &quot;Medium&quot;), levels = c(&quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;)) The greater than operator is not meaningful on the income_nominal factor defined above income_nominal &gt; &quot;Low&quot; ## Warning in Ops.factor(income_nominal, &quot;Low&quot;): &#39;&gt;&#39; not meaningful for factors ## [1] NA NA NA NA NA NA NA NA 3.12 Ordered Factors In statistics terminology, ordered factors are ordinal variables. Levels are ordered. income_ordered &lt;- ordered( c(&quot;High&quot;, &quot;High&quot;, &quot;Low&quot;, &quot;Low&quot;, &quot;Low&quot;, &quot;Medium&quot;, &quot;Low&quot;, &quot;Medium&quot;), levels = c(&quot;Low&quot;, &quot;Medium&quot;, &quot;High&quot;)) income_ordered &gt; &quot;Low&quot; ## [1] TRUE TRUE FALSE FALSE FALSE TRUE FALSE TRUE sort(income_ordered) ## [1] Low Low Low Low Medium Medium High High ## Levels: Low &lt; Medium &lt; High 3.13 Matrices Matrices are collections of numerics arranged in a two-dimensional rectangular layout the first argument is a vector of values the second specifies number of rows and columns R offers operators and functions for matrix algebra a_matrix &lt;- matrix(c(3, 5, 7, 4, 3, 1), c(3, 2)) a_matrix ## [,1] [,2] ## [1,] 3 4 ## [2,] 5 3 ## [3,] 7 1 3.14 Arrays Variables of the type arrayare higher-dimensionalmatrices. the first argument is avector containing thevalues the second argument isavector specifying thedepth of each dimension a3dim_array &lt;- array(1:24, dim=c(4, 3, 2)) a3dim_array ## , , 1 ## ## [,1] [,2] [,3] ## [1,] 1 5 9 ## [2,] 2 6 10 ## [3,] 3 7 11 ## [4,] 4 8 12 ## ## , , 2 ## ## [,1] [,2] [,3] ## [1,] 13 17 21 ## [2,] 14 18 22 ## [3,] 15 19 23 ## [4,] 16 20 24 3.15 Selection Subsets of matrices (and arrays) can be selected as seen for vectors. a_matrix[2, c(1, 2)] ## [1] 5 3 a3dim_array[c(1, 2), 2, 2] ## [1] 17 18 3.16 Lists Variables of the type list can contain elements of different types (including vectors and matrices), whereas elements of vectors are all of the same type. employee &lt;- list(&quot;Stef&quot;, 2015) employee ## [[1]] ## [1] &quot;Stef&quot; ## ## [[2]] ## [1] 2015 employee[[1]] # Note the double square brackets for selection ## [1] &quot;Stef&quot; 3.17 Named Lists In named lists each element has a name, and elements can be selected using their name after the symbol $. employee &lt;- list(employee_name = &quot;Stef&quot;, start_year = 2015) employee ## $employee_name ## [1] &quot;Stef&quot; ## ## $start_year ## [1] 2015 employee$employee_name ## [1] &quot;Stef&quot; 3.18 Recap Data types Vectors Factors Matrices, arrays Lists Next: Control structures Conditional statements Loops "],["control-structures.html", "Lesson 4 Control structures 4.1 Recap 4.2 If 4.3 Else 4.4 Code blocks 4.5 Loops 4.6 While 4.7 For 4.8 For 4.9 Loops with conditional statements 4.10 Summary", " Lesson 4 Control structures 4.1 Recap Prev: Data types Vectors Factors Matrices and arrays Lists Now: Control structures Conditional statements Loops 4.2 If Format: if (condition) statement condition: expression returning a logic value (TRUE or FALSE) statement: any valid R statement statement only executed if condition is TRUE a_value &lt;- -7 if (a_value &lt; 0) cat(&quot;Negative&quot;) ## Negative a_value &lt;- 8 if (a_value &lt; 0) cat(&quot;Negative&quot;) 4.3 Else Format: if (condition) statement1 else statement2 condition: expression returning a logic value (TRUE or FALSE) statement1 and statement2: any valid R statements statement1 executed if condition is TRUE statement2 executed if condition is FALSE a_value &lt;- -7 if (a_value &lt; 0) cat(&quot;Negative&quot;) else cat(&quot;Positive&quot;) ## Negative a_value &lt;- 8 if (a_value &lt; 0) cat(&quot;Negative&quot;) else cat(&quot;Positive&quot;) ## Positive 4.4 Code blocks Code blocks allow to encapsulate several statements in a single group { and } contain code blocks the statements are execute together first_value &lt;- 8 second_value &lt;- 5 if (first_value &gt; second_value) { cat(&quot;First is greater than second\\n&quot;) difference &lt;- first_value - second_value cat(&quot;Their difference is &quot;, difference) } ## First is greater than second ## Their difference is 3 4.5 Loops Loops are a fundamental component of (procedural) programming. There are two main types of loops: conditional loops are executed as long as a defined condition holds true construct while construct repeat deterministic loops are executed a pre-determined number of times construct for 4.6 While The while construct can be defined using the while reserved word, followed by the conditional statement between simple brackets, and a code block. The instructions in the code block are re-executed as long as the result of the evaluation of the conditional statement is TRUE. current_value &lt;- 0 while (current_value &lt; 3) { cat(&quot;Current value is&quot;, current_value, &quot;\\n&quot;) current_value &lt;- current_value + 1 } ## Current value is 0 ## Current value is 1 ## Current value is 2 4.7 For The for construct can be defined using the for reserved word, followed by the definition of an iterator. The iterator is a variable which is temporarily assigned with the current element of a vector, as the construct iterates through all elements of the vector. This definition is followed by a code block, whose instructions are re-executed once for each element of the vector. cities &lt;- c(&quot;Derby&quot;, &quot;Leicester&quot;, &quot;Lincoln&quot;, &quot;Nottingham&quot;) for (city in cities) { cat(&quot;Do you live in&quot;, city, &quot;?\\n&quot;) } ## Do you live in Derby ? ## Do you live in Leicester ? ## Do you live in Lincoln ? ## Do you live in Nottingham ? 4.8 For It is common practice to create a vector of integers on the spot in order to execute a certain sequence of steps a pre-defined number of times. for (i in 1:3) { cat(&quot;This is exectuion number&quot;, i, &quot;:\\n&quot;) cat(&quot; See you later!\\n&quot;) } ## This is exectuion number 1 : ## See you later! ## This is exectuion number 2 : ## See you later! ## This is exectuion number 3 : ## See you later! 4.9 Loops with conditional statements 3:0 ## [1] 3 2 1 0 #Example: countdown! for (i in 3:0) { if (i == 0) { cat(&quot;Go!\\n&quot;) } else { cat(i, &quot;\\n&quot;) } } ## 3 ## 2 ## 1 ## Go! 4.10 Summary Control structures Conditional statements Loops Next: Functions Defining functions Scope of a variable "],["functions-1.html", "Lesson 5 Functions 5.1 Summary 5.2 Defining functions 5.3 Defining functions 5.4 Defining functions 5.5 More parameters 5.6 Functions and control structures 5.7 Scope 5.8 Summary", " Lesson 5 Functions 5.1 Summary Prev:Control structures Conditional statements Loops Now: Functions Defining functions Scope of a variable 5.2 Defining functions A function can be defined using an identifier (e.g., add_one) on the left of an assignment operator &lt;- followed by the corpus of the function add_one &lt;- function (input_value) { output_value &lt;- input_value + 1 output_value } 5.3 Defining functions The corpus starts with the reserved word function followed by the parameter(s) (e.g., input_value) between simple brackets and the instruction(s) to be executed in a code block the value of the last statement is returned as output add_one &lt;- function (input_value) { output_value &lt;- input_value + 1 output_value } 5.4 Defining functions After being defined a function can be invoked by specifying the identifier the necessary parameter(s) add_one(3) ## [1] 4 add_one(1024) ## [1] 1025 5.5 More parameters A function can be defined as having two or more parameters by specifying more than one parameter name (separated by commas) in the function definition A function always take as input as many values as the number of parameters specified in the definition otherwise an error is generated area_rectangle &lt;- function (hight, width) { area &lt;- hight * width area } area_rectangle(3, 2) ## [1] 6 5.6 Functions and control structures Functions can contain both loops and conditional statements factorial &lt;- function (input_value) { result &lt;- 1 for (i in 1:input_value) { cat(&quot;current:&quot;, result, &quot; | i:&quot;, i, &quot;\\n&quot;) result &lt;- result * i } result } factorial(3) ## current: 1 | i: 1 ## current: 1 | i: 2 ## current: 2 | i: 3 ## [1] 6 5.7 Scope The scope of a variable is the part of code in which the variable is `visible'' In R, variables have a **hierarchical** scope: - a variable defined in a script can be used referred to from within a definition of a function in the same script - a variable defined within a definition of a function will **not** be referable from outside the definition - scope does **not** apply toifor loop constructs ## Example In the case below -x_valueis **global** to the functiontimes_x-new_valueandinput_valueare **local** to the functiontimes_x- referring tonew_valueorinput_valuefrom outside the definition oftimes_x` would result in an error x_value &lt;- 10 times_x &lt;- function (input_value) { new_value &lt;- input_value * x_value new_value } times_x(2) ## [1] 20 5.8 Summary Functions Defining functions Scope of a variable Next: Practical session Conditional statements Loops While For Functions Loading functions from scripts Debugging "],["data-frames.html", "Lesson 6 Data frames 6.1 Recap 6.2 Lists and named lists 6.3 Data Frames 6.4 Selection 6.5 Selection 6.6 Table manipulation 6.7 Column processing 6.8 tibble 6.9 Summary", " Lesson 6 Data frames 6.1 Recap Prev: R programming 111 Lecture: Data types 112 Lecture: Control structures 113 Lecture: Functions 114 Practical session Now: Data Frames Data Frames Tibbles 6.2 Lists and named lists List can contain elements of different types whereas elements of vectors are all of the same type in named lists, each element has a name elements can be selected using the operator $ employee &lt;- list(employee_name = &quot;Stef&quot;, start_year = 2015) employee[[1]] ## [1] &quot;Stef&quot; employee$employee_name ## [1] &quot;Stef&quot; 6.3 Data Frames A data frame is equivalent to a named list where all elements are vectors of the same length. employees &lt;- data.frame( EmployeeName = c(&quot;Maria&quot;, &quot;Pete&quot;, &quot;Sarah&quot;), Age = c(47, 34, 32), Role = c(&quot;Professor&quot;, &quot;Researcher&quot;, &quot;Researcher&quot;)) employees ## EmployeeName Age Role ## 1 Maria 47 Professor ## 2 Pete 34 Researcher ## 3 Sarah 32 Researcher Data frames are the most common way to represent tabular data in R. Matrices and lists can be converted to data frames. 6.4 Selection Selection is similar to vectors and lists. employees[1, 1] # value selection ## [1] &quot;Maria&quot; employees[1, ] # row selection ## EmployeeName Age Role ## 1 Maria 47 Professor employees[, 1] # column selection ## [1] &quot;Maria&quot; &quot;Pete&quot; &quot;Sarah&quot; 6.5 Selection Selection is similar to vectors and lists. employees$EmployeeName # column selection, as for named lists ## [1] &quot;Maria&quot; &quot;Pete&quot; &quot;Sarah&quot; employees$EmployeeName[1] ## [1] &quot;Maria&quot; 6.6 Table manipulation Values can be assigned to cells using any selection method and the assignment operator &lt;- New columns can be defined assigning a vector to a new name employees$Age[3] &lt;- 33 employees$Place &lt;- c(&quot;Leicester&quot;, &quot;Leicester&quot;,&quot;Leicester&quot;) employees ## EmployeeName Age Role Place ## 1 Maria 47 Professor Leicester ## 2 Pete 34 Researcher Leicester ## 3 Sarah 33 Researcher Leicester 6.7 Column processing Operations can be performed on columns as they where vectors 10 - c(1, 2, 3) ## [1] 9 8 7 # Use Sys.Date to retrieve the current year current_year &lt;- as.integer(format(Sys.Date(), &quot;%Y&quot;)) # Calculate employee year of birth employees$Year_of_birth &lt;- current_year - employees$Age employees ## EmployeeName Age Role Place Year_of_birth ## 1 Maria 47 Professor Leicester 1974 ## 2 Pete 34 Researcher Leicester 1987 ## 3 Sarah 33 Researcher Leicester 1988 6.8 tibble A tibble is a modern reimagining of the data.frame within tidyverse they do less dont change column names or types dont do partial matching complain more e.g. when referring to a column that does not exist That forces you to confront problems earlier, typically leading to cleaner, more expressive code. 6.9 Summary Data Frames Data Frames Tibbles Next: Data selection and filtering dplyr dplyr::select dplyr::filter "],["selection-and-filtering.html", "Lesson 7 Selection and filtering 7.1 Recap 7.2 dplyr 7.3 Example dataset 7.4 Selecting table columns 7.5 dplyr::select 7.6 dplyr::select 7.7 Logical filtering 7.8 Conditional filtering 7.9 Filtering data frames 7.10 dplyr::filter 7.11 Select and filter 7.12 Summary", " Lesson 7 Selection and filtering all R code parts are removed, because of an unsolved error message 7.1 Recap Prev: Data Frames Data Frames Tibbles Now: Data selection and filtering dplyr dplyr::select dplyr::filter 7.2 dplyr The dplyr (pronounced dee-ply-er) library is part of tidyverse and it offers a grammar for data manipulation select: select specific columns filter: select specific rows arrange: arrange rows in a particular order summarise: calculate aggregated values (e.g., mean, max, etc) group_by: group data based on common column values mutate: add columns join: merge tables (tibbles or data.frames) 7.3 Example dataset 7.4 Selecting table columns 7.5 dplyr::select select can be used to specify which columns to retain 7.6 dplyr::select  or whichones to drop, using - in front of the column name 7.7 Logical filtering Conditional statements can be used to filter a vector i.e. to retain only certain values where the specified value is TRUE 7.8 Conditional filtering As a conditional expression results in a logic vector  conditional expressions can be used for filtering 7.9 Filtering data frames The same approach can be applied to data frames and tibbles 7.10 dplyr::filter 7.11 Select and filter 7.12 Summary Data selection and filtering dplyr dplyr::select dplyr::filter "],["read-and-write-data.html", "Lesson 8 Read and write data 8.1 Summary 8.2 Text file formats 8.3 Comma Separated Values 8.4 readr 8.5 readr::read_csv 8.6 Read options 8.7 Column specifications 8.8 readr::read_csv 8.9 readr::read_csv 8.10 readr::read_csv 8.11 readr::write_csv 8.12 readr::write_tsv 8.13 Other data imports 8.14 Summary", " Lesson 8 Read and write data all R code parts are removed, because of an unsolved error message 8.1 Summary Tidy-up your data Wide and long data Re-shape data Handle missing values Next: Read and write data file formats read write 8.2 Text file formats A series of formats based on plain-text files For instance comma-separated values files .csv semi-colon-separated values files .csv tab-separated values files .tsv other formats using custom delimiters fix-width files .fwf 8.3 Comma Separated Values The file 2011_OAC_supgrp_Leicester.csv contains one row for each Output Area (OA) in Leicester Lower-Super Output Area (LSOA) containing the OA code and name of the supergroup assigned to the OA by the 2011 Output Area Classification total population of the OA Extract showing only the first few rows OA11CD,LSOA11CD,supgrpcode,supgrpname,Total_Population E00069517,E01013785,6,Suburbanites,313 E00069514,E01013784,2,Cosmopolitans,323 E00169516,E01013713,4,Multicultural Metropolitans,341 E00169048,E01032862,4,Multicultural Metropolitans,345 8.4 readr The readr (pronounced read-er) library is part of tidyverse Provides functions to read and write text files readr::read_csv: comma-separated files .csv readr::read_csv2: semi-colon-separated files .csv readr::read_tsv: tab-separated files .tsv readr::read_fwf: fix-width files .fwf readr::read_delim: files using a custom delimiter and their write counterpart, such as readr::write_csv: comma-separated files .csv 8.5 readr::read_csv The readr::read_csv function of the readr library reads a csv file from the path provided as the first argument 8.6 Read options Read functions provide options about how to interpret a file contents For instance, readr::read_csv col_names: TRUE or FALSE whether top row is column names or a vector of column names col_types: a cols() specification or a string skip: lines to skip before reading data n_max: max number of record to read 8.7 Column specifications col_logical() or l as logic values col_integer() or i as integer col_double() or d as numeric (double) col_character() or c as character col_factor(levels, ordered) or f as factor col_date(format = \"\") or D as data type col_time(format = \"\") or t as time type col_datetime(format = \"\") or T as datetime col_number() or n as numeric (dropping marks) col_skip() or _ or - dont import col_guess() or ? use best type based on the input 8.8 readr::read_csv Using readr::read_csv as in the previous example with no further options will generate the following warning 8.9 readr::read_csv 8.10 readr::read_csv 8.11 readr::write_csv The function write_csv can be used to save a dataset to csv Example: read the 2011 OAC dataset select a few columns filter only those OA in the supergroup Suburbanites (code 6) write the results to a file named 2011_OAC_supgrp_Leicester_supgrp6.csv 8.12 readr::write_tsv 8.13 Other data imports Tidyverse also imports other packages for reading data Tabular formats readxl for Excel (.xls and .xlsx) haven for SPSS, Stata, and SAS data. Databases DBI for relational databases NoSQL jsonlite for JSON xml2 for XML Web httr for web APIs 8.14 Summary Read and write data file formats read write Next: Practical session Read and write data Tidy data Join operations "],["data-visualisation.html", "Lesson 9 Data visualisation 9.1 Recap 9.2 Visual variables 9.3 Grammar of graphics 9.4 ggplot2 9.5 Boxplots 9.6 Jittered points 9.7 Violin plot 9.8 Violin plot 9.9 Lines 9.10 Lines 9.11 Scatterplots 9.12 Overlapping points 9.13 Overlapping points 9.14 Bin counts 9.15 Bin counts 9.16 Summary", " Lesson 9 Data visualisation all R code parts are removed, because of an unsolved error message 9.1 Recap Prev: Reproducibility 221 Reproducibility 222 R and Markdown 223 Git 224 Practical session Now: Data visualisation Grammar of graphics ggplot2 9.2 Visual variables A visual variable is an aspect of a mark that can be controlled to change its appearance. Visual variables include: Size Shape Orientation Colour (hue) Colour value (brightness) Texture Position (2 dimensions) 9.3 Grammar of graphics Grammars provide rules for languages The grammar of graphics takes us beyond a limited set of charts (words) to an almost unlimited world of graphical forms (statements) (Wilkinson, 2005) Statistical graphic specifications are expressed in six statements: Data manipulation Variable transformations (e.g., rank), Scale transformations (e.g., log), Coordinate system transformations (e.g., polar), Element: mark (e.g., points) and visual variables (e.g., color) Guides (axes, legends, etc.). 9.4 ggplot2 The ggplot2 library offers a series of functions for creating graphics declaratively, based on the Grammar of Graphics. To create a graph in ggplot2: provide the data specify elements which visual variables (aes) which marks (e.g., geom_point) apply transformations guides 9.5 Boxplots x categorical variable y variable to plot geom_boxplot 9.6 Jittered points x categorical variable y variable to plot geom_jitter 9.7 Violin plot x categorical variable y variable to plot geom_violin 9.8 Violin plot 9.9 Lines x e.g., a temporal variable y variable to plot geom_line 9.10 Lines 9.11 Scatterplots x and y variable to plot geom_point 9.12 Overlapping points x and y variable to plot geom_count counts overlapping points and maps the count to size 9.13 Overlapping points 9.14 Bin counts x and y variable to plot geom_bin2d 9.15 Bin counts 9.16 Summary Data visualisation Grammar of graphics ggplot2 Next: Descriptive statistics stat.desc dplyr::across "],["references.html", "References", " References "]]
