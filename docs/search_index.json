[["r-markdown.html", "Lesson 9 R Markdown 9.1 Set up your work environment 9.2 Create a local clone 9.3 Create a first RMarkdown document 9.4 Synchronize with GitHub 9.5 Basic RMarkdown syntax 9.6 Speed up your workflows 9.7 Self-study", " Lesson 9 R Markdown This lesson is dedicated to the library rmarkdown. In fact, however, R Markdown is more than only a library. RMarkdown belongs to a set of tools that are designed to improve the reproducibility of your work. Other tools and platforms such as GitHub, Jupyter, Docker or preprint servers such as ArXiv or bioRxiv facilitate reproducibility in many different ways. In this module, we will not cover the paradigm of reproducible research in detail. Instead, we will focus on those aspects that will helping you make your analyses and reports more appealing, interactive and efficient. In this lesson, we will weave together code and text in professionally rendered R Markdown documents. And we will use GitHub to safely store, share and administer our results. 9.1 Set up your work environment Before you will create your first R Markdown document, we have to setup the GitHub environment. GitHub was originally founded as a platform for software developers. The architecture of GitHub is designed to manage changes that are made to computer software in the process of software development. The same architecture, however, can also be used to control the versioning of documents or any other collection of information. Version control is particularly important when working in teams to sync working steps among project participants. However, even when working individually, GitHub is a trustworthy and open online data dump that tracks changes and simplifies the documentation and sharing of your work. To setup your personal GitHub environment, follow these steps: Read through the Hello-World-Section of GitHub’s Quickstart Documentation. For now, reading is fine. You do not necessarily have to work through the tutorial. Create a GitHub account. Download and install Git. Git is responsible for everything GitHub-related that happens locally on your machine. Open R Studio -&gt; Tools -&gt; Global Options -&gt; Git / SVN: check “enable version control” and set the path to the git.exe (e.g. C:/Program Files/Git/bin/git.exe). Restart RStudio. Create a repository on GitHub. In the tutorial, Skip section ‘Commit your first changes’. By default, your repository has one branch named main. Create an additional branch off the main and call this new branch dev. To do so, follow the instructions in the Hello-World-Tutorial. As next step, you will have to install the rmarkdown library as well as tinytex in RStudio as described in the R Markdown Guide. In order to correctly install tinytex, make sure to execute both lines in RStudio: install.packages(&#39;tinytex&#39;) tinytex::install_tinytex() # install TinyTeX RStudio may call for the installation of dependencies. Follow the instructions and install the requested libraries. In case you are facing any technical issues, please turn to the discussion forum! 9.2 Create a local clone In order to locally work on your repository contents, you will have to create a local clone of your online GitHub repository. In RStudio: File -&gt; New Project… -&gt; Version Control -&gt; Git. Copy/past the Repository URL (go to your Online repository to find URL), browse local directory and Create Project (see Fig. 9.1). Figure 9.1: Clone GitHub Repository Once you have cloned the online repository, the file contents of the repository as well as a new tab called Git appears in RStudio (see Fig. 9.2). Figure 9.2: New features in RStudio Per default the repository contains three files: gitignore An RStudio Project File (.Rproj) A ReadMe File (.md = pure markdown) gitignore and the RStudio Project File were created on project initialization, meaning that these files are new and not yet available in the online repository. Changes made to the original repository are listed in the Git tab (see Fig. 9.3). Figure 9.3: Changes in Git tab Before we further modify our repository, switch to the dev branch (see Fig. 9.4). At the moment dev branch and main branch are identical. Figure 9.4: Switch branch It his highly recommended to keep work in progress separate from the main branch by working in a separate developer branch. Later, branches may be unified by merging from dev into the main branch (see Opening a pull request). 9.3 Create a first RMarkdown document Now that the environment is set up, we can create a first simple R Markdown document. In RStudio: File -&gt; New File -&gt; R Markdown…. Type in a title, keep the default settings and confirm with OK. As a result you get a minimal R Markdown sample file, with the file extension .Rmd. As apparent from the sample file, R Markdown documents are composed of the three basic components metadata, text and code (see Fig. 9.5). Figure 9.5: R Markdown sample file The syntax for the metadata is YAML. In our document, the metadata section specifies the title of the document, the output format, and the date of creation. Many other document properties can be specified in this section. Here you can find an overview of the basic YAML syntax. After the metadata section an R inline code block starts and ends with backticks. The three parameters in curly brackets identify the code as R code. setup is the name of the code block and (as we will see later) include=FALSE prevents code and code results of this code chunk from being displayed in the compiled HTML output. Nevertheless, R Markdown still runs the code in this block. The inline code block as such sets echo=TRUE as default option for all code chunks in the document. This means, per default the code of all code chunks in the document are displayed in the output file, if not otherwise indicated. The other code blocks in the .Rmd document produce a summary output (see lines 7-19) or create a simple scatterplot (see lines 25-27). To see how the compiled HTML output looks like, click Knit (see Fig. 9.6). Figure 9.6: Knit HTML Output Alternatively, you may click on the dropdown arrow next to the Knit button and compile PDF or .docx outputs. Please take your time to understand how the .Rmd syntax translates into an output. For instances, to bold text, you can add two asterisks before and after a word or phrase. 9.4 Synchronize with GitHub It is good practice to synchronize changes made to the project on a regular basis with the online repository. First, we need to pull changes that someone else could have made in the meantime. Click the Pull button in the Git tab (see Fig. 9.7). A message appears indicating that no other changes have been made (Already up to date). Figure 9.7: Make Pull Even if you work on your own, it is advisable to routinely start the sync process with a Pull. Before you can push your own changes to the online repository, you have to Commit changes. Committing is like in-process saving. The Commit takes a snapshot of your changes. This snapshot is combined with a user defined commit message. Locally save all documents in RStudio. Click the Commit button in the Git tab . Those files that are affected by changes are listed in the commit window. You can click on one of the files. The changes will be displayed (green is new, red is deleted content). Manually select all files by clicking the respective checkboxes. In order to make sure that you have not missed a file, you may execute git add -A in the terminal window to add all files to the commit (see list of popular Git Commands). Once this is done, enter a meaningful commit message that describes your revision and push the Commit button. See Fig. 9.8 Figure 9.8: Make Commit To finish the sync process, click the Push button in the Git tab (see Fig. 9.9). Figure 9.9: Make Push Your online repository on GitHub should now be updated (switch to dev branch in your repository) (see Fig. 9.10). Figure 9.10: Commit with message ‘decribe sync process in github’ was pushed to the developer branch a minute ago 9.5 Basic RMarkdown syntax The use of double asterisks (**Text**) to bold words and phrases in R Markdown documents has already been mentioned. Alternatively, text may be italicized by placing single asterisks (*Text*) before and after text. Moreover, hash signs indicate headings. The number of hash signs you use corresponds to the heading level: # Heading level 1 ## Heading level 2 ### Heading level 3 R Markdown also comes with a time-saving method to insert citations and to build a bibliography. References are collected in a .bib-file that resides in the RStudio Project folder. To create a .bib-file, you can use any text editor. Open a new document (for instance a Windows Editor file), replace .txt with .bib (e.g. references.bib) and save to the Project folder. You can use the RStudio project that you have cloned, modified and synchronized in previous exercises. Now you can add references to the .bib-file. References are encoded in BibTeX format. The easiest way to get the BibTeX description of a reference is to export from Google Scholar. To enable BibTeX export, change setting in Google Scholar (see Fig. 9.11). Figure 9.11: Enable BibTeX in Firefox 106.0.1 You may use a different browser or version of Firefox. In case you need support, please turn to the discussion forum! Once you have enabled BibTeX export in your browser, a new link Import into BibTeX appears in Google Scholar (see Fig. 9.12). Figure 9.12: BibTeX Link in Firefox 106.0.1 Click the link and copy &amp; paste the BibTeX code into your .bib-file. Now you can use the reference in your R Markdown file by specifying the name of the .bib-file as YAML metadata. You can add multiple BibTeX references to the .bib-file. The syntax to embedded references in text is @&lt;first BibTeX parameter (see Fig. 9.13). Figure 9.13: Integrate BibTeX reference in RMarkdown document To compile your R Markdown document, knit as HTML, PDF or Word. The rmarkdown library renders references as indirect citations (reference without squared brackets in .Rmd file) and direct citations (reference with squared brackets in .Rmd file) and inserts a bibliography (see Fig. 9.14). Figure 9.14: Knit R Markdown as PDF Here you can find a worked example for download. Unzip the folder and open the .Rproj file in RStudio. Other helpful R Markdown syntax examples can be looked up in the RMarkdown Cheatsheet. 9.6 Speed up your workflows Many of the methods that were covered in this module are intended to make repetitive workflows more efficient and less time-consuming. In this section, an example is introduced that illustrates the great potentials of R Markdown in terms of automation and efficiency improvement. Let’s assume a client of you is interest in a specific set of spatial economic indicators that are updated on a daily basis. Rather than creating a data report on every new day from scratch, R Markdown allows you to create a data report with charts that are auto-generated on report compilation. Data can be retrieved in real-time by means of Alpha Ventage. Alpha Ventage provides financial market data through the Alpha Ventage Rest API. To access the API in R, we can use the R library alphaventager. In this exercise you are provided with a first draft version of the finance data report. Download the draft version. Unzip the folder and open the .Rproj file in RStudio. The project includes a .bib file that contains a BibTeX reference, a .csv file (see folder data) with more than 400 country names, national currencies and currency codes and an .Rmd file with inline R code that renders real-time currency exchange in a map. Carefully read through the .Rmd file before you compile an HTML output. Important: The .Rmd file includes an interactive leaflet map, i.e. other outputs than HTML are not supported. Once you have understood the structure of this document, try to supplement the finance data report with an additional spatial indicator (e.g. map of exchange rates from national currencies to Euro). 9.7 Self-study The functionality of R Markdown is fairly comprehensive and cannot be covered in one lesson. It is highly recommended to consult the online book R Markdown: The Definitive Guide to leverage the full potential of R Markdown. Other R Markdown compile formats that are described in this book are Notebooks and Presentations. RMarkdown also support other languages such as Python, C++ and SQL. Moreover, R Markdown is customizable and can be used to design more complex documents with extensions like BookDown or ThesisDown. By the way, this module is written in BookDown. "]]
