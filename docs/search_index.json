[["control-structures.html", "Lesson 4 Control structures 4.1 If 4.2 Else 4.3 Code blocks 4.4 Loops 4.5 Loops with conditional statements", " Lesson 4 Control structures In this lesson, you will get to know control structures as a significant structural element of code. Control structures allow our code to adapt its behavior depending on the value of the current variables in the environment. We distinguish between two types of control structures: Conditional statements, which allow executing instructions only if a certain condition is satisfied. Loops, which allow to repeat one or more instructions multiple times. Loops are commonly used to apply the same operation on a series of values that are stored in sequences such as vectors or lists. 4.1 If The most fundamental conditional statement in R is the structure ‘if’, which is used to execute one or more instructions only if a certain condition is TRUE. In order to include an if-structure in your code, you need to use the following syntax: a_value &lt;- -7 if (a_value &lt; 0) { cat(&quot;Negative&quot;) } ## Negative The statement ‘cat(“Negative”)’ gets executed and the text “Negative” is printed out, because the condition (a_value &lt; 0) is TRUE. The function cat() concatenates and prints string inputs (“Negative” in the example above). Alternatively, you can use the function ‘print()’ to write variable values to the console window. These functions are highly useful to inspect whether variables take on expected values! Note that every conditional statement (e.g. ‘a_value &lt; 0’) returns a logical value that is either TRUE or FALSE. Remove the negative sign from the conditional statement in the code above. See solution! The condition yields FALSE. The statement is not executed. 4.2 Else In many cases, we want the interpreter to do something if the condition is satisfied or do something else, if the condition is not satisfied. In this case, we can use ‘if’ together with ‘else’: a_value &lt;- -7 if (a_value &lt; 0){ cat(&quot;Negative&quot;) } else { cat(&quot;Positive&quot;) } ## Negative In the example above, the condition ‘a_value &lt; 0’ is TRUE, statement 1 ‘cat(“Negative”)’ gets executed and statement 2 ‘cat(“Positive”)’ is ignored. If you change ‘a_value’ to a positive value, the interpreter will ignore statement 1 and execute statement 2. Note that statement 1 and statement 2 are in curly brackets! The indentation of statements is good programming practice, however does not affect the functioning of the code. However, inserting a line break before ‘else’ returns an error. The reason for this behavior is explained in this forum thread. 4.3 Code blocks Conditional structures have a wide range of applications. Almost everything what a computer does requires an input. Each time you click a button the computer responds accordingly. The code that dictates the response typically has an if-else control structure or something very similar that tells the computer what to do depending on the input it got. Obviously in most cases the response won’t be defined by a single instruction, but a code block that is composed of multiple instructions. Code blocks allow encapsulating several statements in a single group. The condition in the following example yields TRUE and the code block is executed: first_value &lt;- 8 second_value &lt;- 5 if (first_value &gt; second_value) { cat(&quot;First is greater than second\\n&quot;) difference &lt;- first_value - second_value cat(&quot;Their difference is&quot;, difference) } ## First is greater than second ## Their difference is 3 The line ‘cat(“First is greater than second”)’ prints a text (string) and inserts a line break. The next line calculates the difference between first and second value. The third line in the code block concatenates two inputs (“Their difference is” and variable ‘difference’) and prints them to the console window. ‘if’ and ‘else’ are so called reserved words, meaning they cannot be used as variable names. 4.4 Loops The second family of control structures that we are going to discuss in this lesson are loops. Loops are a fundamental component of (procedural) programming. They allow repeating one or more instructions multiple times. There are two main types of loops: conditional loops are executed as long as a defined condition holds true construct while construct repeat deterministic loops are executed a pre-determined number of times construct for 4.4.1 While and repeat The while construct can be defined using the while reserved word, followed by a condition between simple brackets, and a code block. The instructions in the code block are re-executed as long as the result of the evaluation of the condition is TRUE. current_value &lt;- 0 while (current_value &lt; 3) { cat(&quot;Current value is&quot;, current_value, &quot;\\n&quot;) current_value &lt;- current_value + 1 } ## Current value is 0 ## Current value is 1 ## Current value is 2 Go through the example above and try to verbalize the consecutive steps. See solution! The variable ‘current_value’ takes on a value of zero. The condition of the while-loop returns TRUE. The ‘cat()’ function is executed and prints a text as well as ‘current_value’. The variable ‘current_value’ is incremented by +1. The condition of the while-loop returns TRUE (current_value = 1), the code block is executed again (see 3 and 4). current_value = 2, the code block is executed again (see 3 and 4). current_value = 3, the condition returns FALSE, the loops ends. The same procedure can alternatively be implemented by means of the repeat construct: current_value &lt;- 0 repeat { cat(&quot;Current value is&quot;, current_value, &quot;\\n&quot;) current_value = current_value + 1 if (current_value == 3){ #if (variable == 3)... break #the loop will break! } } ## Current value is 0 ## Current value is 1 ## Current value is 2 The break statement is executed and stops (breaks) the repeat loop (also applicable to while or for loops) once the variable current_value is equal to three. 4.4.2 For The for construct can be defined using the for reserved word, followed by the definition of an iterator. The iterator is a variable, which is temporarily assigned with the current element of a vector, as the construct iterates through all elements of the vector. This definition is followed by a code block, whose instructions are re-executed once for each element of the vector. cities &lt;- c(&quot;Derby&quot;, &quot;Leicester&quot;, &quot;Lincoln&quot;, &quot;Nottingham&quot;) for (city in cities) { cat(&quot;Do you live in &quot;, city, &quot;?\\n&quot;, sep=&quot;&quot;) } ## Do you live in Derby? ## Do you live in Leicester? ## Do you live in Lincoln? ## Do you live in Nottingham? In the first iteration of the for-loop the text string “Derby” is assigned to the iterator ‘city’. The function ‘cat()’ uses the iterator value as an input. In the second iteration, the text string “Leicester” is assigned to the iterator ‘city’ … etc. The code block below illustrates another example. cities &lt;- c(&quot;Derby&quot;, &quot;Leicester&quot;, &quot;Lincoln&quot;, &quot;Nottingham&quot;) letter_cnt &lt;- c() for (city in cities) { letter_cnt &lt;- c(letter_cnt, nchar(city)) } print(letter_cnt) ## [1] 5 9 7 10 The for-loop iterates over the elements in vector ‘cities’. The base function ‘nchar()’ counts the number of letters of every city name and appends the count to a new vector ‘letter_cnt’. Note that with every iteration a new value is appended to the right side of the vector. The syntax for appending elements to a vector in R is… name vector &lt;- c(name vector, element to append) There are some cases in which, for some reason, you just want to execute a certain sequence of steps a pre-defined number of times. In such cases, it is common practice to create a vector of integers on the spot. In the following example the for-loop is executed 3 times as it iterates over a vector composed of the three elements 1, 2, and 3 (vector is created on the spot by 1:3): for (i in 1:3) { cat(&quot;This is exectuion number&quot;, i, &quot;:\\n&quot;) cat(&quot; See you later!\\n&quot;) } ## This is exectuion number 1 : ## See you later! ## This is exectuion number 2 : ## See you later! ## This is exectuion number 3 : ## See you later! Replace the vector 1:3 by a vector 3:5. What is different? See solution! The for-loop is still executed 3 times. However, the iterator ‘i’ returns the values 3, 4, and 5. 4.5 Loops with conditional statements Now that we have seen both types of control structures, conditional statements and loops, we can combine these structures. R, as most other programming languages, allows you to include conditional statements within a loop or a loop within a conditional statement. A simple example is this bit of code that defines a countdown: #Example: countdown! for (i in 3:0) { if (i == 0) { cat(&quot;Go!\\n&quot;) } else { cat(i, &quot;\\n&quot;) } } ## 3 ## 2 ## 1 ## Go! The deterministic loop runs 4 time on the values 3, 2, 1, and 0. If the iterator ‘i’ takes on a value of 0 the print “Go!” otherwise print the current value of the iterator ‘i’. The result will be 3, 2, 1, Go! See another example! library(tidyverse) cities &lt;- c(&quot;Salzburg&quot;, &quot;Linz&quot;, &quot;Wien&quot;, &quot;Eisenstadt&quot;, &quot;Innsbruck&quot;, &quot;Graz&quot;) for (city in cities){ if (str_starts(city, &quot;S&quot;)){ print(&quot;City name starts with S&quot;) } else{ print(&quot;City name starts with other letter&quot;) } } ## [1] &quot;City name starts with S&quot; ## [1] &quot;City name starts with other letter&quot; ## [1] &quot;City name starts with other letter&quot; ## [1] &quot;City name starts with other letter&quot; ## [1] &quot;City name starts with other letter&quot; ## [1] &quot;City name starts with other letter&quot; We need to load the library ‘tidyverse’ to make use of the function ‘str_starts()’. You may have to install ‘tidyverse’ (see Libraries in lesson core Concepts). ‘cities’ is a vector of strings that includes the names of some Austrian federal capitals. The for-loop iterates over these vector elements. The function ‘str_starts’ takes the value of the iterator ‘city’ as well as a string “S” as inputs. If the city starts with letter S, the function returns TRUE and “City name starts with S” is printed to the console window, otherwise the function returns FALSE and “City name starts with other letter” is printed. "]]
