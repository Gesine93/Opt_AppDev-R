[["rmarkdown.html", "Lesson 9 RMarkdown 9.1 Set up your work environment 9.2 Create a local clone 9.3 Create a first RMarkdown document 9.4 Synchronize with GitHub 9.5 Basic RMarkdown syntax 9.6 Speed up your workflows 9.7 Self-study", " Lesson 9 RMarkdown This lesson is dedicated to the library rmarkdown. In fact, however, Rmarkdown is more than only a library. RMarkdown belongs to a set of tools that are designed to improve the reproducibility of your work. Other tools and platforms such as GitHub, Jupyter, Docker or preprint servers such as ArXiv or bioRxiv facilitate reproducibility in many different ways. In this module, we will not cover the paradigm of reproducible research in detail. Instead, we will focus on those aspects that will helping you make your analyses and reports more appealing, interactive and efficient. In this lesson, we will weave together code and text in professionally rendered Rmarkdown documents. And we will use GitHub to savely store, share and administer our results. 9.1 Set up your work environment Before you will create your first Rmarkdown document, we have to setup the GitHub environment. GitHub was originally founded as a platform for software developers. The architecture of GitHub is designed to manage changes that are made to computer software in the process of software development. The same architecture, however, can also be used to control the versioning of documents or any other collection of information. To setup your personal GitHub environment, follow these steps: Read through the Hello-World-Section of GitHub’s Quickstart Documentation. For now reading is fine. You do not necessarily have to work through the tutorial. Create a GitHub account. Download and install Git. Git is responsible for everything GitHub-related that happens locally on your machine. Open R Studio -&gt; Tools -&gt; Global Options -&gt; Git / SVN: check “enable version control” and set the path to the git.exe (e.g. C:/Program Files/Git/bin/git.exe). Restart RStudio. Create a repository on GitHub. Skip section ‘Commit your first changes’. By default, your repository has one branch named main. Create an additional branch off the main and call this new branch dev. To do so, follow the instructions in the Hello-World-Tutorial. As next step, you will have to install the rmarkdown library as well as tinytex in RStudio as described in the RMarkdown Guide. In order to correctly install tinytex, make sure to execute both lines in RStudio: install.packages(&#39;tinytex&#39;) tinytex::install_tinytex() # install TinyTeX RStudio may call for the installation of dependencies. Follow the instructions and install the requested libraries. In case you are facing any technical issues, please turn to the discussion forum! 9.2 Create a local clone In order to locally work on your repository contents, you will have to create a local clone of your online GitHub repository. In RStudio: File -&gt; New Project… -&gt; Version Control -&gt; Git. Copy/past the Repository URL (go to your Online repository to find URL), browse local directory and Create Project (see Fig. 9.1). Figure 9.1: Clone GitHub Repository Once you have cloned the online repository, the file contents of the repository as well as a new tab called Git appears in RStudio (see Fig. 9.2). Figure 9.2: New features in RStudio Per default the repository contains three files: gitignore An RStudio Project File (.Rproj) A ReadmMe File (.md = pure markdown) gitignore and the RStudio Project File were created on project initialization, meaning that these files are new and not yet available in the online repository. Changes made to the original repository are listed in the Git tab (see Fig. 9.3). Figure 9.3: Changes in Git tab Before we further modify our repository, switch to the dev branch (see Fig. 9.4). At the moment dev branch and main branch are identical. Figure 9.4: Switch branch It his highly recommended to keep work in progress seperate from the main branch. Later on, we will merge our changes from dev into the main branch. 9.3 Create a first RMarkdown document Now that the environment is set up, we can create a first simple RMarkdown document. In RStudio: File -&gt; New File -&gt; R Markdown…. Type in a title, keep the default settings and confirm with OK. As a result you get a minimal RMarkdown sample file, with the file extension .Rmd. As apparent from the sample file, RMarkdown documents are composed of the three basic components metadata, text and code (see Fig. 9.5). Figure 9.5: RMarkdown sample file The syntax for the metadata is YAML. In our document, the metadata section specifies the title of the document, the output format and the date of creation. A large number of other document properties can be specified in this section. Here you can find an overview of the basic YAML syntax. After the metadata section an R inline code block starts and ends with backticks. The three parameters in curly brackets identify the code as R code. setup is the name of the code block and (as we will see later) include=FALSE prevents code and code results from being displayed in the compiled HTML output. Nevertheless, RMarkdown still runs the code in this block. The inline code block as such sets echo=TRUE as default option for all code chunks in the document, which prevents code, but not the results from being displayed. The other code blocks in the .Rmd document produce a summary output (see lines 7-19) or create a simple scatterplot (see lines 25-27). To see how the compiled HTML output looks like, click Knit (see Fig. 9.6). Figure 9.6: Knit HTML Output Alternatively, you may click on the dropdown arrow next to the Knit button and compile PDF or .docx outputs. Please take your time to understand how the .Rmd syntax translates into an output. For instances, to bold text, you can add two astersisks before and after a word or phrase. 9.4 Synchronize with GitHub first pull…somebody may have made changes to the dev branch , let them push also merge dev to main This document should be stored in the GitHub repository that you have created. In order to make changes locally on your machine, you first have to pull the online fetch the online GitHub repository After you have set up GitHub and RMarkdown, you can create Now that we can create an RMarkdown document and push it to GitHub. go through syntax this is written in rmarkdown 9.5 Basic RMarkdown syntax link to cheatsheet 9.6 Speed up your workflows update real-time data flows in rmakrdown doc 9.7 Self-study R Markdown book "]]
