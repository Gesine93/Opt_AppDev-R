[["intro.html", "Application Development with R Lesson 1 Introduction to R 1.1 About this module 1.2 R programming language 1.3 Installation and Setup 1.4 Interpreting values 1.5 Simple data types 1.6 Numeric operators 1.7 Logical operators 1.8 Reference books", " Application Development with R Christian Neuwirth 13 Oktober, 2021 Lesson 1 Introduction to R 1.1 About this module This module will provide you with the fundamental skills in basic programming in R. We will start with some core concepts of programming that are the building blocks of programming in any language. This includes Datatypes, Operators, Variables, Functions, Control Structures and Libraries. On this basis, we will explore more complex data types like Data Frames and Tibbles as well as methods to Read and Write spatial and non-spatial datasets. In many cases the available data will not be suitable for your analyses. You will learn how to filter, query, subset, join and re-shape data to fit your needs. After you have learned how to manipulate data, you will learn to perform statistical analyses (exploratory data analysis, comparing data, regression models) and how to visualize results by means of diagrams (e.g. box plots, scatterplots, line plots etc.) and maps. Upon the completion of this module, you will have the fundamental skills in R programming as a basis for more advanced methods like Geospatial Data Analysis (is covered by the module Spatial Statistics in the MSc program) and Machine Learning. This module is based on the teaching materials granolarr worked out by Stefano de Sabbata at the University of Leicester. For more information take a look at the Granolarr Lecture Pages. The chapter Machine Learning is recommended as a follow up read for those who are willing to delve into more advanced applications of R. 1.2 R programming language R is a language that is applied in diverse fields of data science and analysis. Typical applications include data wrangling statistical analysis machine learning data visualisation and maps processing spatial data geographic information analysis and many more. Apart from its widespread use, there are a number of other reasons to learn R R is free and open source. R has more comprehensive functionality than most proprietary solutions. R is avaialble for Windows, May and Linux R is a general-purpose programming language, so you can use it to automate analyses and create new custom functions that extend default features. Because R is open source, it has a large user community, so it is easy to get help. R is a so called high level programming language or scripting language. This means that R code is not compiled into a computer readable format, but interpreted by an interpreter. An interpreter is a computer program that directly interprets and executes instructions written in a programming language. In order to make sure that the interpreter can understand the program code, the programmer must stick to the grammar of the programming language; i.e. the interpreter expects commands to appear in a predefined order. This grammar is often regarded as Syntax. In this lession we will focus on some key principles of the R syntax and logic. 1.3 Installation and Setup Before you can run your code, you have to install R together with an Integrated Development Environment (IDE) on your machine: Download R from R Archive Network (CRAN.) Follow the instructions and install the most up to date version on your machine (chose base as well as 32-bit or 64-bit dependent on the bit-version of your operating system). The IDE is where your write, test and execute your R programs. We strongly recommend using RStudio Desktop, which is freely available for download. If you need help, please turn to the discussion forum! 1.4 Interpreting values Now that you have installed RStudio and R on your machine, it is time to run some code in RStudio. When you open RStudio, you will find the Console Window (see Fig. 1.1). When values and operations are inputted in the Console, the interpreter returns the results of its interpretation of the expression. Figure 1.1: Console Window in RStudio Type in a numeric value (e.g. 3) and press Enter. The interpreter returns a value in brackets and the input value. The value in brackets indicates that the input is composed of one single entity. What if you type in a text value (e.g. test) and press Enter? See solution! The interpreter returns an error, because this datatype is unknown. Text is commonly reffered to as String or String of Characters. When apostrophes (i.e. \"Test\") are added, the interpreter knows that this is a String. If you start your input with a hash symbol (#) the interpreter will consider that line as a comment. For instance, if you type in # comments are ignored, you will see that nothing is returned as an output. Comments are extremely important as they allow you to add explanations in plain language. Comments are fundamental to allow other people to understand your code and it will save you time interpreting your own code. 1.5 Simple data types In the previous section you have already see numeric and character (string) data types. Logical is a third simple data type provided with R. R provides three core data types numeric both integer and real numbers character i.e., text, also called strings logical TRUE or FALSE The type logical encodes the values TRUE or FALSE. Together these three simple data types are the building blocks R uses to encode information. If you type a simple numeric operation in the console (e.g. 2 + 4), the interpreter will return a result. This indicates that operations (e.g. mathematical calculations) can be carried out on these types. Logical operations return values of type logical. What value is returned in the console when you type and execute the expression 2 &lt; 3? See solution! The interpreter returns TRUE, because 2 is less than 3. 1.6 Numeric operators R provides a series of basic numeric operators. Operator Meaning Example Output + Plus 5 + 2 7 - Minus 5 - 2 3 * Product 5 * 2 10 / Division 5 / 2 2.5 %/% Integer division 5 %/% 2 2 %% Module 5 %% 2 1 ^ Power 5^2 25 Whereas mathematical operators are self-explanatory, the operators Module and Integer division may be new to some of you. Integer division returns an integer quotient: 5%/%2 ## [1] 2 Execute 5 %% 2 to test the Module operator. See solution! The Module returns the remainder of the division, which is 1 in the example above. 1.7 Logical operators R also provides a series of basic logical operators to create logical expressions. Operator Meaning Example Output == Equal 5 == 2 FALSE != Not equal 5 != 2 TRUE &gt; (&gt;=) Greater (or equal) 5 &gt; 2 TRUE &lt; (&lt;=) Less (or equal) 5 &lt;= 2 FALSE ! Not !TRUE FALSE &amp; And TRUE &amp; FALSE FALSE | Or TRUE | FALSE TRUE Logical expressions are typically used to execute code dependent on the occurrence of conditions. What logical values are returned by the following expressions: (3 != 5) | (3 == 4) (2 &gt;= 3) | (3 &lt; 7) (2 == 9) &amp; (2 &lt; 4) Type and execute (Enter button) in the RStudio console to validate your assumptions. 1.8 Reference books Suggested reading Programming Skills for Data Science: Start Writing Code to Wrangle, Analyze, and Visualize Data with R by Michael Freeman and Joel Ross, Addison-Wesley, 2019. See book webpage and repository. R for Data Science by Garrett Grolemund and Hadley Wickham, OReilly Media, 2016. See online book. Discovering Statistics Using R by Andy Field, Jeremy Miles and ZoÃ« Field, SAGE Publications Ltd, 2012. See book webpage. Machine Learning with R: Expert techniques for predictive modeling by Brett Lantz, Packt Publishing, 2019. See book webpage. Further reading The Art of R Programming: A Tour of Statistical Software Design by Norman Matloff, No Starch Press, 2011. See book webpage An Introduction to R for Spatial Analysis and Mapping by Chris Brunsdon and Lex Comber, Sage, 2015. See book webpage Geocomputation with R by Robin Lovelace, Jakub Nowosad, Jannes Muenchow, CRC Press, 2019. See online book. "]]
